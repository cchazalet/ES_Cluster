---

- name: Check that the directory /tmp/{{ ansible_ssh_user }}/kibana-7.10.2-linux-x86_64 exists
  stat:
    path: /tmp/{{ ansible_ssh_user }}/kibana-7.10.2-linux-x86_64
  register: stat_result

- name: ensure /tmp/{{ ansible_ssh_user }}/ directory exists
  file:
    path: /tmp/{{ ansible_ssh_user }}/
    state: directory

- name: Extract archive
  ansible.builtin.unarchive:
   src: https://artifacts.elastic.co/downloads/kibana/kibana-7.10.2-linux-x86_64.tar.gz
   dest: /tmp/{{ ansible_ssh_user }}/
   remote_src: yes
  when: stat_result.stat.exists == False 

- name: Get master nodes
  vars:
   masters: []
  set_fact: 
   masters: "{{ masters + ['http://'+hostvars[neighbor].inventory_hostname_short+'.insa-lyon.fr:'+es_port|string]}}"
  when:
   - hostvars[neighbor].master == true 
   - hostvars[neighbor].elastic == true 
  loop: "{{ groups['tpE'] }}"
  loop_control:
   loop_var: neighbor

- name: Generate config file on remote host
  template:
   src: templates/config_kibana.j2
   dest: "/tmp/{{ ansible_ssh_user }}/kibana-7.10.2-linux-x86_64/config/{{ config_file_name_kibana }}.yml"

- name: kill pid kibana
  ansible.builtin.shell: pkill -f kibana
  ignore_errors: yes

- name: Run kibana 
  ansible.builtin.shell: cd /tmp/{{ ansible_ssh_user }}; nohup /tmp/{{ ansible_ssh_user }}/kibana-7.10.2-linux-x86_64/bin/kibana -Q &